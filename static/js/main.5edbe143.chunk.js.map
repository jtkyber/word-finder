{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","letters","setLetters","length","setLength","words","setWords","findWords","a","fetch","response","ok","Error","json","results","console","log","className","onChange","e","target","value","type","onClick","map","word","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"kPA6CeA,MA1Cf,WACE,MAA8BC,mBAAS,IAAvC,mBAAOC,EAAP,KAAgBC,EAAhB,KACA,EAA4BF,mBAAS,IAArC,mBAAOG,EAAP,KAAeC,EAAf,KACA,EAA0BJ,mBAAS,IAAnC,mBAAOK,EAAP,KAAcC,EAAd,KAEMC,EAAS,uCAAG,8BAAAC,EAAA,+EAEeC,MAAM,8CAAD,OAA+CR,EAA/C,uBAAqEE,IAFzF,WAEFO,EAFE,QAGMC,GAHN,sBAIE,IAAIC,MAAM,SAJZ,uBAMcF,EAASG,OANvB,OAMFC,EANE,OAORR,EAASQ,GAPD,kDASRC,QAAQC,IAAR,MATQ,0DAAH,qDAaf,OACE,sBAAKC,UAAU,MAAf,UACI,sBAAKA,UAAU,SAAf,sBACW,uBAAOC,SAAU,SAAAC,GAAC,OAAIjB,EAAWiB,EAAEC,OAAOC,QAAQJ,UAAU,UAAUK,KAAK,SADtF,wBAEuB,uBAAOJ,SAAU,SAAAC,GAAC,OAAIf,EAAUe,EAAEC,OAAOC,QAAQJ,UAAU,SAASK,KAAK,YAEhG,qBAAKL,UAAU,QAAf,SACE,wBAAQM,QAAShB,EAAjB,qBAEF,qBAAKU,UAAU,UAAf,SAEEZ,EAAMmB,KAAI,SAAAC,GACR,OACE,qBAAKR,UAAU,OAAf,SACE,6BAAKQ,KADoBA,YCtB1BC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,8BACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.5edbe143.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport './App.css';\n\nfunction App() {\n  const [letters, setLetters] = useState('');\n  const [length, setLength] = useState('');\n  const [words, setWords] = useState([]);\n\n  const findWords = async () => {\n     try {\n            const response = await fetch(`http://localhost:3001/getSomeWords?letters=${letters}&wordLength=${length}`)\n            if (!response.ok) {\n                throw new Error('Error')\n            }\n            const results = await response.json();\n            setWords(results);\n        } catch(err) {\n            console.log(err);\n        }\n  }\n\n  return (\n    <div className=\"app\">\n        <div className='search'>\n          Letters: <input onChange={e => setLetters(e.target.value)} className='letters' type='text'/>\n          Desired Word Length: <input onChange={e => setLength(e.target.value)} className='length' type='text'/>\n        </div>\n        <div className='enter'>\n          <button onClick={findWords}>Enter</button>\n        </div>\n        <div className='results'>\n        {\n          words.map(word => {\n            return (\n              <div className='word' key={word}>\n                <li>{word}</li>\n              </div>\n            )\n          })\n        }\n        </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <div>\n    <App />\n  </div>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}